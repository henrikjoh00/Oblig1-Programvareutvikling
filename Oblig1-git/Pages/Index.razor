@page "/"

@using System.Timers

<PageTitle>Index</PageTitle>

<h1>TSD2490 - Oblig1</h1>

<style>
    .container {
        width: 400px;
    }

    button {
        width: 100px;
        height: 100px;
        font-size: 50px;}

    .liten-knapp {
        width: 25%;
        height: 25px;
        font-size: 0.75rem;
   padding: 0.25rem 0.5rem;
}

</style>


<div class="form-group">
    <label for="theme">Velg tema:</label>
    <select class="form-control" id="theme" @bind="selectedTheme" @bind:event="oninput" @onchange="@(() => OnSelectedThemeChange())">
        <option value="dyr">Dyr</option>
        <option value="mat">Mat</option>
        <option value="sport">Sport</option>
    </select>
</div>

<div class="container">
    
    <div class="row" style="margin-top:10px">
        @for (var animalNumber = 0; animalNumber < shuffledAnimals.Count; animalNumber++)
        {
            var animal = shuffledAnimals[animalNumber];
            var uniqueDescription = $"Button #{animalNumber}";

            <div class="col-3">
            <button @onclick="@(() => ButtonClick(animal, uniqueDescription))"
            type="button" class="btn btn-outline-dark">
            <h1>@animal</h1>
            </button>
            </div>
        }
    </div>

    <div>
        <input type="text" @bind-value="@navn" />
        <button class="liten-knapp" @onclick="Lagre">Lagre navn</button>
    </div>
    
    <div class="row">
        <button @onclick="@(() => SetUpGame())" type="button" class="btn btn-primary">Start Game</button>
    </div>
    <div class="row">
        <h2>Matches found: @matchesFound</h2>
    </div>
    <div class="row">
        <h2>Time: @timeDisplay</h2>
    </div>
</div>

@if (spillFerdig)
{
    <h2>Resultater:</h2>
    <table>
        <thead>
            <tr>
                <th>Navn</th>
                <th>Tid brukt</th>
            </tr>
        </thead>
        <tbody>
            @for(int i = 0; i<@antallSpillere; i++)
                {
                <tr>
                    <td>@spillere[i]</td>
                    <td>@tider[i]</td>
                </tr>
                    
                }
        </tbody>
    </table>
}


@code{
    private bool spillFerdig = false;
    private string navn;

    int antallSpillere = 0;
    int tidBrukt;

    List<string> spillere = new List<string>();
    List<int> tider = new List<int>();

    private string selectedTheme;

    List<string> animalEmoji = new List<string>()
{
    "🐍", "🐍",
    "🐤", "🐤",
    "😺", "😺",
    "🐘", "🐘",
    "🦋", "🦋",
    "🐅", "🐅",
    "🐒", "🐒",
    "🦈", "🦈",


    "🍔", "🍔",
    "🍕", "🍕",
    "🍟", "🍟",
    "🍩", "🍩",
    "🍦", "🍦",
    "🥪", "🥪",
    "🥤", "🥤",
    "🍺", "🍺",

    "⚽️", "⚽️",
    "🏀", "🏀",
    "🎾", "🎾",
    "🏈", "🏈",
    "🥊", "🥊",
    "🏊", "🏊",
    "🚴", "🚴",
    "⛳️", "⛳️",
};

    List<string> shuffledAnimals = new List<string>();

    int matchesFound = 0;

    Timer timer;
    int tenthsOfSecondsElapsed = 0;
    string timeDisplay;
    int timeLeft;


    protected override void OnInitialized()
    {
        //timer = new Timer(1000);
        //timer.Elapsed += Timer_Tick;

        //SetUpGame();
    }

    private void OnSelectedThemeChange()
    {
        //SetUpGame();
    }

    private void SetUpGame()
    {

        Random random = new Random();

        switch (selectedTheme)
        {

            case "dyr":
                shuffledAnimals = animalEmoji
                    .Where(a => "🐍🐤😺🐘🦋🐅🐒🦈".Contains(a))
                    .OrderBy(item => random.Next())
                    .ToList();
                break;

            case "mat":
                shuffledAnimals = animalEmoji
                .Where(a => "🍔🍕🍟🍩🍦🥪🥤🍺".Contains(a))
                    .OrderBy(item => random.Next())
                    .ToList();
                break;

            case "sport":
                shuffledAnimals = animalEmoji
                .Where(a => "⚽️🏀🎾🏈🥊🏊🚴⛳️".Contains(a))
                    .OrderBy(item => random.Next())
                    .ToList();
                break;

        } 

        matchesFound = 0;
        tenthsOfSecondsElapsed = 0;
        lastAnimalFound = string.Empty;
        lastDescription = string.Empty;
        //timeDisplay = "00:20:00.0";


        timer = new Timer(1000);
        timer.Elapsed += Timer_Tick;

        timeLeft = 20;
        timer.Start();
    }


    string lastAnimalFound = string.Empty;
    string lastDescription = string.Empty;

    private void ButtonClick(string animal, string animalDescription)
    {
        if (lastAnimalFound == string.Empty)
        {
            // First selection of the pair. Remember it.
            lastAnimalFound = animal;

            lastDescription = animalDescription;

        }
        else if ((lastAnimalFound == animal) && (animalDescription != lastDescription))
        {
            // Match funnet og det er ikke den samme som ble trykket 2 ganger
            lastAnimalFound = string.Empty;
            // Setter den forrige knappen lik en "tom" string for å skjule emojien
            shuffledAnimals = shuffledAnimals
            .Select(a => a.Replace(animal, string.Empty))
            .ToList();

            matchesFound++;
            if (matchesFound == 8)
            {
                timer.Stop();
                tidBrukt = 20 - timeLeft;

                if (tidBrukt <= 0) tidBrukt = 0;

                tider[antallSpillere] = tidBrukt;
                timeDisplay += "   Game Complete";

                spillFerdig = true;

                //for(int i = 0; i<antallSpillere; i++)
                //{
                //    spillere[i]
            //}
            }

        }
        else
        {
            // User selected a pair that don't match.
            // Reset selection.
            lastAnimalFound = string.Empty;
        }
    }

    private void Timer_Tick(Object source, ElapsedEventArgs e)
    {
        InvokeAsync(() =>
        {
            timeLeft--;
            timeDisplay = TimeSpan.FromSeconds(timeLeft).ToString(@"ss\.f") + "s";
            if ((timeLeft <= 0) && (matchesFound != 8))
            {
                timeDisplay = "GAME OVER";
                timer.Enabled = false;
            }
            StateHasChanged();
        });
    }

    private void Lagre()
    {
        spillere[antallSpillere] = navn;

        antallSpillere++;
    }

}

